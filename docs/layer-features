#Layer Features

This is a more comprehensive list of established features to add to layers.
You can add more freely, if you want to have other functions or values associated with your layer. These have special functionality, though.

#Layer-defining features

- startData: A function to return the default save data for this layer. Add any variables you have to it.
             Any nonstandard Decimal variables need to be added to convertToDecimal as well.
    Required values:
        unl: a bool determining if it is unlocked or not
        points: a Decimal, the main currency for the layer
    Useful:
        total: A decimal, tracks total amount of main prestige currency
        best: A decimal, tracks highest amount of main prestige currency
        order: used to keep track of relevant layers unlocked before this one.

- color: A color associated with this layer, used in many places. (A string in hex format with a #)

- row: The row of the layer, starting at 0.

- resource: Name of the main currency you gain by resetting on this layer.

- effect: **optional**, A function that calculates and returns the current values of any bonuses inherent to the main currency.
                          Returns a value or an object containing multiple values.

- effectDescription: **optional**, A function that returns a description of this effect

- style: A CSS object containing any CSS that should affect this layer's whole tab.

- [tabFormat: Use this if you want to add extra things to your tab or change the layout. Explanations are in a separate file.](docs/custom-tab-layouts.md)



-----Prestige formula features-----

baseResource: The resource that determines how much of the main currency you gain on reset.

baseAmount() - How you get the current value of baseResource (e.g. baseAmount() {player.points})

requires() - A function that determines how much base resource you need to reset as a Decimal value. It can return a constant value, or change based on your order.

type: can be "normal" or "static". "normal" means the amount of currency you gain is independent of its current amount (like Prestige). "static" means that the cost grows depending on how much you already have (like Boosters). They both use different formulas. normal = x^exponent, static is base^(x^exponent)

exponent: Prestige currency exponent

base: Prestige currency base, only needed for "static" layers

resCeil: Bool, true if the resource needs to be rounded up

canBuyMax() - Only needed for static layers, used to determine if buying max is permitted.

gainMult(), gainExp() - Used to determine the multiplier and exponent on resource gain from upgrades and boosts and such. Plug all of them in here.

onPrestige(gain) - Optional, Triggers when this layer prestiges, just before you gain the currency. Can be used to have secondary resource gain on prestige, or to recalculate things or whatnot.


-----Other features-----

doReset(resettingLayer) - Optional, is triggered when a layer on a row greater than or equal to this one. If you use it, you can choose what to keep via milestones and such. Without it, the default is to reset everything on the row, but only if it was triggered by a higher layer.

convertToDecimal() - Only needed if you have non-standard Decimal values in startData, to these values from strings to Decimals after loading.

layerShown() - Returns a bool determining if this layer's node should be visible on the tree.

update(diff) - Optional, part of the main loop, use it for any passive resource production or time-based things. diff is the time since the last update. Suggestion: use addPoints(layer, gain) when generating points to automatically update the best and total amounts.

automate() - Optional, use it to activate any autobuyers or auto-resets or similar on this layer, if appropriate. 

updateTemp() - Optional, use it to update anything in the "temp" object. 

resetsNothing() - Optional, returns true if this layer shouldn't trigger any resets.

incr_order: Optional, an array of layer names, their order will increase by 1 when this one is first unlocked. Can be empty.

branches: Optional, an array of pairs consisting of a layer name and a number from 1 to 3. When this layer is visible, for each pair, there will be a branch from this layer to the other layer with a color determined by the number.

